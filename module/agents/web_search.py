from agents import (
    Agent,
    WebSearchTool,
    ModelSettings
)
from pydantic import (
    BaseModel,
    Field
)

from module.constants import (
    DEFAULT_LLM,
    DEFAULT_WEB_SEARCH_PLAN_TOPICS
)


WEB_SEARCH_AGENT_INSTRUCTIONS = """
YOU ARE AN AGENT WHO WILL BE PERFORMING WEB SEARCH 
FOR THE DETAIL THAT IS PASSED TO YOU.
ENSURE THAT RELEVANT AND CONCISE DETAILS ARE SENT BACK
AS AN OUTPUT TO THE SEARCH RESULT YOU OBTAIN AND THEN 
PROVIDE. 
THE OUTPUT SHOULD NOT BE OF MARKDOWN TYPE AND RATHER 
TEXT OUTPUT IS PREFERRED.
DO NOT ADD ANY ADDITIONAL DETAIL FROM YOUR SIDE, 
ONLY FORMAT AND RETURN BACK WHATEVER YOU OBTAIN
FROM YOUR WEB SEARCH. 
CITE SOURCES OF YOUR WEB SEARCH TO HELP PROVIDE
REFERENCES.
MAKE SURE TO SHOW THE DETAIL AS A Q and A SO THAT THE 
END USER USING IT WILL BE ABLE TO CLEARLY UNDERSTAND 
WHICH PIECE OF INFORMATION IS ASSOCIATED TO WHICH 
QUESTION.
"""


WEB_SEARCH_PLANNER_INSTRUCTIONS = f"""
YOU ARE AN AGENT THAT IS TASKED TO COME UP WITH A LIST
OF WEB SEARCHES THAT CAN BE PERFORMED FOR A TASK AT HAND.
YOU WILL GET THE EXACT SAME DETAIL AS THE AGENT WHO WILL
BE CO-ORDINATING THE SEARCHES WITH YOU.
YOUR OUTPUT SHOULD NOT BE A MARKDOWN.
YOU SHOULD COME UP WITH A LIST OF CONCISE SEARCH DETAILS
AND ENSURE NO ADDITIONAL METADATA IS ADDED.
AN EXAMPLE CAN BE, IF SOMEONE ASKS ABOUT MOUNT KAILASH,
YOUR OUTPUT SEARCHES CAN BE:
* REGION WHERE IT IS SITUATED
* HISTORICAL SIGNIFICANCE
* PROPERTIES
* GOVT REGULATIONS
* SPIRITUAL SIGNIFICANCE
.
.
AND THIS CAN CONTINUE ON AND ON. 
GENERATE THE LIST WITH 
{DEFAULT_WEB_SEARCH_PLAN_TOPICS} WEB SEARCHES ONLY.
"""


WEB_SEARCH_PLAN_TRIMMER_INSTRUCTIONS = f"""
YOUR COLLEAGUE WILL GENERATE A LIST OF TOPICS TO BE
SEARCHED. YOUR JOB IS TO DETERMINE IF THERE ARE 
DUPLICATES, LIERALLY OR EVEN SEMANTICALLY.
AN EXAMPLE IS, YOU RECEIVE 
[STOCK DETAIL LAST 7 DAYS, STOCK PRICE YESTERDAY]
NOW THE FIRST ONE ENCLOSES THE SECOND AS LAST 7 DAYS
INCLUDES YESTERDAY. HENCE, THE OUTPUT YOU RETURN WILL
BE [STOCK LAST 7 DAYS]. 
"""


class WebSearchItemList(BaseModel):
    search_term: list[str] = Field(
        "List of searches to be made."
    )


# TODO: should we have an evaluator here?
web_search_planner_agent = Agent(
    name="web search planner",
    instructions=WEB_SEARCH_PLANNER_INSTRUCTIONS,
    model=DEFAULT_LLM,
    output_type=WebSearchItemList
)


web_search_plan_trimmer_agent = Agent(
    name="web search planner",
    instructions=WEB_SEARCH_PLAN_TRIMMER_INSTRUCTIONS,
    model=DEFAULT_LLM,
    output_type=WebSearchItemList
)


# TODO: SHOULD WE ADD A FORMATTER HERE? - I DON'T THINK SO.
web_search_agent = Agent(
    name="web search agent",
    instructions=WEB_SEARCH_AGENT_INSTRUCTIONS,
    tools=[
        WebSearchTool(
            search_context_size="low"
        )
    ],
    model=DEFAULT_LLM,
    model_settings=ModelSettings(
        tool_choice="required"
    )
)

